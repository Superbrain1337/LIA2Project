// <auto-generated />
using System;
using LIA2Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LIA2Project.Migrations
{
    [DbContext(typeof(DuoSTATIONContext))]
    [Migration("20190305125806_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LIA2Project.Models.Actions", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActionLastTry")
                        .HasColumnType("datetime");

                    b.Property<short?>("ActionRetryCount");

                    b.Property<short?>("ActionRetryMax");

                    b.Property<string>("ActionSource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("ActionStatus");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("LIA2Project.Models.AHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .HasColumnName("HistoryID");

                    b.Property<string>("HistoryCategory")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HistoryGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid?>("HistoryInventoryId")
                        .HasColumnName("HistoryInventoryID");

                    b.Property<byte?>("HistorySeverity");

                    b.Property<string>("HistorySource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HistorySubject")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("HistoryText")
                        .HasColumnType("text");

                    b.Property<byte?>("HistoryType");

                    b.Property<string>("HistoryUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("HistoryId");

                    b.HasIndex("HistoryDate");

                    b.ToTable("A_History");
                });

            modelBuilder.Entity("LIA2Project.Models.AInventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnName("InventoryID");

                    b.Property<bool?>("InventoryAccessory");

                    b.Property<string>("InventoryAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryComment")
                        .HasColumnType("text");

                    b.Property<Guid?>("InventoryCustomerId")
                        .HasColumnName("InventoryCustomerID");

                    b.Property<string>("InventoryDebitAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryDebitActive");

                    b.Property<string>("InventoryDebitActivity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitDepartment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryDebitExist");

                    b.Property<Guid?>("InventoryDebitId")
                        .HasColumnName("InventoryDebitID");

                    b.Property<string>("InventoryDebitObject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitOwner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitProject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitReceiver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDistinguishedName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("InventoryExternalId")
                        .HasColumnName("InventoryExternalID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryImportMdm")
                        .HasColumnName("InventoryImportMDM");

                    b.Property<DateTime?>("InventoryInvDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("InventoryInvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventoryLastLogon")
                        .HasColumnType("datetime");

                    b.Property<string>("InventoryLocation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("InventoryLocationAltitude");

                    b.Property<double?>("InventoryLocationLatitude");

                    b.Property<double?>("InventoryLocationLongitude");

                    b.Property<DateTime?>("InventoryLocationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InventoryManufacturer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryModel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("InventoryOwner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryParent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryProductNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventoryProductionDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("InventoryPurchaseAmount");

                    b.Property<DateTime?>("InventoryPurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySecurityId")
                        .HasColumnName("InventorySecurityID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySubgroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySupplier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("InventorySupportCost");

                    b.Property<string>("InventorySupportExtent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySupportFrom")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySupportNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySupportTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InventorySupportToReminderSent")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySupportType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySyncId")
                        .HasColumnName("InventorySyncID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("InventorySyncSource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventorySynchronized");

                    b.Property<int>("InventoryType");

                    b.Property<string>("InventoryUniqueId")
                        .HasColumnName("InventoryUniqueID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("InventoryVirtualHost");

                    b.Property<byte?>("InventoryVirtualType");

                    b.Property<DateTime?>("InventoryWarrantyTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InventoryWarrantyToReminderSent")
                        .HasColumnType("datetime");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryName");

                    b.ToTable("A_Inventory");
                });

            modelBuilder.Entity("LIA2Project.Models.AppInfo", b =>
                {
                    b.Property<Guid>("AppInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppInfoID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppInfoApplication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppInfoCompany")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppInfoDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppInfoProduct")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppInfoProductVersion")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("AppInfoVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AppInfoId");

                    b.ToTable("AppInfo");
                });

            modelBuilder.Entity("LIA2Project.Models.AppLinks", b =>
                {
                    b.Property<Guid>("AppLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppLinkID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppLinkApplication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppLinkLicense")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AppLinkVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AppLinkId");

                    b.ToTable("AppLinks");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseContacts", b =>
                {
                    b.Property<int>("CaseContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseContactID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseContactGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("CaseContactNotify");

                    b.Property<short?>("CaseContactRole");

                    b.Property<int>("CaseId")
                        .HasColumnName("CaseID");

                    b.HasKey("CaseContactId");

                    b.HasIndex("CaseContactName");

                    b.ToTable("CaseContacts");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseDevices", b =>
                {
                    b.Property<int>("CaseDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseDeviceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseDeviceGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CaseDeviceInventoryId")
                        .HasColumnName("CaseDeviceInventoryID");

                    b.Property<string>("CaseDeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CaseId")
                        .HasColumnName("CaseID");

                    b.HasKey("CaseDeviceId");

                    b.HasIndex("CaseDeviceName");

                    b.ToTable("CaseDevices");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseEvents", b =>
                {
                    b.Property<int>("CaseEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseEventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CaseEventCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseEventCreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("CaseEventDebit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CaseEventObjectId")
                        .HasColumnName("CaseEventObjectID");

                    b.Property<byte?>("CaseEventStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CaseEventText")
                        .HasColumnType("text");

                    b.Property<double?>("CaseEventTime");

                    b.Property<short?>("CaseEventType");

                    b.Property<bool?>("CaseEventWeb");

                    b.Property<int>("CaseId")
                        .HasColumnName("CaseID");

                    b.HasKey("CaseEventId");

                    b.HasIndex("CaseEventCreatedDate");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseEvents");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseGroups", b =>
                {
                    b.Property<int>("CaseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseGroupNotes")
                        .HasColumnType("text");

                    b.HasKey("CaseGroupId");

                    b.ToTable("CaseGroups");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseItems", b =>
                {
                    b.Property<int>("CaseItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnName("CaseID");

                    b.Property<int?>("CaseItemCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("CaseItemDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool?>("CaseItemDebit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CaseItemDescription")
                        .HasColumnType("text");

                    b.Property<string>("CaseItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("CaseItemNeedsApproval");

                    b.Property<string>("CaseItemNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<double?>("CaseItemPrice");

                    b.HasKey("CaseItemId");

                    b.ToTable("CaseItems");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseMail", b =>
                {
                    b.Property<int>("CaseMailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseMailCaseId");

                    b.Property<int>("CaseMailMailId");

                    b.HasKey("CaseMailId");

                    b.ToTable("CaseMail");
                });

            modelBuilder.Entity("LIA2Project.Models.CaseReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnName("CaseID");

                    b.Property<int>("CaseReferenceId")
                        .HasColumnName("CaseReferenceID");

                    b.HasKey("Id");

                    b.ToTable("CaseReferences");
                });

            modelBuilder.Entity("LIA2Project.Models.Cases", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CaseArchived");

                    b.Property<DateTime?>("CaseAssignedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseAssignedTo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseAssignedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CaseCalcDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("CaseCalcTime");

                    b.Property<string>("CaseCalcUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("CaseCategory1");

                    b.Property<byte?>("CaseCategory2");

                    b.Property<byte?>("CaseCategory3");

                    b.Property<DateTime?>("CaseChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseChangedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CaseCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseCreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CaseCustomerId")
                        .HasColumnName("CaseCustomerID");

                    b.Property<bool?>("CaseDebit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CaseDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CaseDueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseDueUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseExternalNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("CaseGroupId")
                        .HasColumnName("CaseGroupID");

                    b.Property<bool>("CaseIsTemplate");

                    b.Property<string>("CaseKeywords")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CaseLangId")
                        .HasColumnName("CaseLangID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<byte?>("CaseLevel");

                    b.Property<DateTime?>("CaseLevelDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseLevelUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseNotes")
                        .HasColumnType("text");

                    b.Property<bool?>("CaseNotify");

                    b.Property<short?>("CasePriority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CaseRatingCount");

                    b.Property<double?>("CaseRatingValue");

                    b.Property<bool?>("CaseRemind");

                    b.Property<DateTime?>("CaseRemindDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseReportedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CaseReportedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CaseServiceId")
                        .HasColumnName("CaseServiceID");

                    b.Property<DateTime?>("CaseServiceLevelActionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CaseServiceLevelContractId")
                        .HasColumnName("CaseServiceLevelContractID");

                    b.Property<DateTime?>("CaseServiceLevelEscalateDateLevel2")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CaseServiceLevelEscalateDateLevel3")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CaseServiceLevelId")
                        .HasColumnName("CaseServiceLevelID");

                    b.Property<DateTime?>("CaseServiceLevelNotificationSentHandler")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CaseServiceLevelNotificationSentManager")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CaseServiceLevelNotifyDateHandler")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CaseServiceLevelNotifyDateManager")
                        .HasColumnType("datetime");

                    b.Property<bool>("CaseServiceLevelUpdate");

                    b.Property<string>("CaseSolution")
                        .HasColumnType("text");

                    b.Property<byte?>("CaseStatus");

                    b.Property<DateTime?>("CaseStatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseStatusUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("CaseType");

                    b.Property<Guid?>("CaseUniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CaseUniqueID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte?>("CaseVisibility")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("LIA2Project.Models.CategoriesLevel1", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SysID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SysId");

                    b.ToTable("CategoriesLevel1");
                });

            modelBuilder.Entity("LIA2Project.Models.CategoriesLevel2", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SysID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Category1");

                    b.Property<int?>("Code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SysId");

                    b.ToTable("CategoriesLevel2");
                });

            modelBuilder.Entity("LIA2Project.Models.CategoriesLevel3", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SysID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Category1");

                    b.Property<int?>("Category2");

                    b.Property<int?>("Code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SysId");

                    b.ToTable("CategoriesLevel3");
                });

            modelBuilder.Entity("LIA2Project.Models.ChangeLog", b =>
                {
                    b.Property<int>("ChangeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChangeLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeLogAction");

                    b.Property<DateTime>("ChangeLogDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("ChangeLogObjectId")
                        .HasColumnName("ChangeLogObjectID");

                    b.Property<string>("ChangeLogObjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ChangeLogObjectNewValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ChangeLogObjectOldValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ChangeLogObjectProperty")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ChangeLogObjectType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ChangeLogObjectUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ChangeLogId");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("LIA2Project.Models.Connections", b =>
                {
                    b.Property<int>("ConnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConnID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ConnAdminStatus");

                    b.Property<Guid>("ConnDeviceId")
                        .HasColumnName("ConnDeviceID");

                    b.Property<byte?>("ConnDuplexConfig");

                    b.Property<short?>("ConnDuplexMode");

                    b.Property<short?>("ConnDuplexType");

                    b.Property<int?>("ConnIfIndex");

                    b.Property<string>("ConnIfName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ConnMacaddress")
                        .HasColumnName("ConnMACAddress")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.Property<short?>("ConnOperStatus");

                    b.Property<short?>("ConnPort");

                    b.Property<string>("ConnRemoteIfName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ConnRemoteIp")
                        .HasColumnName("ConnRemoteIP")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ConnRemoteMacaddress")
                        .HasColumnName("ConnRemoteMACAddress")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.Property<short?>("ConnRemotePort");

                    b.Property<short>("ConnRemoteStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("ConnSpeed");

                    b.Property<string>("ConnVlan")
                        .HasColumnName("ConnVLAN")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ConnId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("LIA2Project.Models.Customers", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CustomerDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CustomerParentId")
                        .HasColumnName("CustomerParentID");

                    b.Property<DateTime?>("CustomerSyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerSyncId")
                        .HasColumnName("CustomerSyncID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("CustomerSyncSource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("CustomerSynchronized");

                    b.Property<short?>("CustomerType");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LIA2Project.Models.Debits", b =>
                {
                    b.Property<Guid>("DebitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DebitID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<double?>("DebitAmount");

                    b.Property<string>("DebitCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DebitComment")
                        .HasColumnType("text");

                    b.Property<string>("DebitName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("DebitType");

                    b.HasKey("DebitId");

                    b.ToTable("Debits");
                });

            modelBuilder.Entity("LIA2Project.Models.DocLinks", b =>
                {
                    b.Property<Guid>("DocLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocLinkID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("DocLinkDocumentId")
                        .HasColumnName("DocLinkDocumentID");

                    b.Property<Guid?>("DocLinkLinkId")
                        .HasColumnName("DocLinkLinkID");

                    b.Property<string>("DocLinkLinkType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DocLinkId");

                    b.ToTable("DocLinks");
                });

            modelBuilder.Entity("LIA2Project.Models.Documents", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DocumentPath")
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("LIA2Project.Models.History", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HistoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("HistoryCategory")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HistoryGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid?>("HistoryInventoryId")
                        .HasColumnName("HistoryInventoryID");

                    b.Property<byte?>("HistorySeverity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HistorySource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HistorySubject")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("HistoryText")
                        .HasColumnType("text");

                    b.Property<byte?>("HistoryType");

                    b.Property<string>("HistoryUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("HistoryId");

                    b.HasIndex("HistoryDate");

                    b.ToTable("History");
                });

            modelBuilder.Entity("LIA2Project.Models.Info", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InfoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("InfoCategory1");

                    b.Property<byte?>("InfoCategory2");

                    b.Property<byte?>("InfoCategory3");

                    b.Property<DateTime?>("InfoExpires")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("InfoLangId")
                        .HasColumnName("InfoLangID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("InfoRatingCount");

                    b.Property<double?>("InfoRatingValue");

                    b.Property<string>("InfoSolution")
                        .HasColumnType("text");

                    b.Property<string>("InfoText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InfoTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("InfoTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("InfoType");

                    b.Property<Guid>("InfoUniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InfoUniqueID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte?>("InfoVisibility");

                    b.HasKey("InfoId");

                    b.ToTable("Info");
                });

            modelBuilder.Entity("LIA2Project.Models.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InventoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("InventoryAccessory")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("InventoryAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryComment")
                        .HasColumnType("text");

                    b.Property<Guid?>("InventoryCustomerId")
                        .HasColumnName("InventoryCustomerID");

                    b.Property<string>("InventoryDebitAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryDebitActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("InventoryDebitActivity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitDepartment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryDebitExist")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("InventoryDebitId")
                        .HasColumnName("InventoryDebitID");

                    b.Property<string>("InventoryDebitObject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitOwner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitProject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDebitReceiver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryDistinguishedName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("InventoryExternalId")
                        .HasColumnName("InventoryExternalID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventoryImportMdm")
                        .HasColumnName("InventoryImportMDM");

                    b.Property<DateTime?>("InventoryInvDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("InventoryInvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventoryLastLogon")
                        .HasColumnType("datetime");

                    b.Property<string>("InventoryLocation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("InventoryLocationAltitude");

                    b.Property<double?>("InventoryLocationLatitude");

                    b.Property<double?>("InventoryLocationLongitude");

                    b.Property<DateTime?>("InventoryLocationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InventoryManufacturer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryModel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("InventoryOwner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryParent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryProductNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventoryProductionDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("InventoryPurchaseAmount");

                    b.Property<DateTime?>("InventoryPurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySecurityId")
                        .HasColumnName("InventorySecurityID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySubgroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventorySupplier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("InventorySupportCost");

                    b.Property<string>("InventorySupportExtent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySupportFrom")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySupportNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySupportTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InventorySupportToReminderSent")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySupportType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InventorySyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InventorySyncId")
                        .HasColumnName("InventorySyncID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("InventorySyncSource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InventorySynchronized")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("InventoryType");

                    b.Property<string>("InventoryUniqueId")
                        .HasColumnName("InventoryUniqueID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InventoryUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("InventoryVirtualHost");

                    b.Property<byte?>("InventoryVirtualType");

                    b.Property<DateTime?>("InventoryWarrantyTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InventoryWarrantyToReminderSent")
                        .HasColumnType("datetime");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryName");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("LIA2Project.Models.Items", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("ItemNeedsApproval");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<double>("ItemPrice");

                    b.Property<bool>("ItemWeb");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemNumber")
                        .IsUnique()
                        .HasName("IX_Items");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LIA2Project.Models.ItserviceContracts", b =>
                {
                    b.Property<Guid>("ItserviceContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITServiceContractID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ItserviceContractCustomerContact")
                        .HasColumnName("ITServiceContractCustomerContact")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ItserviceContractCustomerContactReminderSent")
                        .HasColumnName("ITServiceContractCustomerContactReminderSent")
                        .HasColumnType("datetime");

                    b.Property<bool>("ItserviceContractCustomerContactSendMail")
                        .HasColumnName("ITServiceContractCustomerContactSendMail");

                    b.Property<Guid>("ItserviceContractCustomerId")
                        .HasColumnName("ITServiceContractCustomerID");

                    b.Property<string>("ItserviceContractDescription")
                        .HasColumnName("ITServiceContractDescription")
                        .HasColumnType("text");

                    b.Property<string>("ItserviceContractManager")
                        .HasColumnName("ITServiceContractManager")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ItserviceContractManagerReminderSent")
                        .HasColumnName("ITServiceContractManagerReminderSent")
                        .HasColumnType("datetime");

                    b.Property<bool>("ItserviceContractManagerSendMail")
                        .HasColumnName("ITServiceContractManagerSendMail");

                    b.Property<string>("ItserviceContractName")
                        .IsRequired()
                        .HasColumnName("ITServiceContractName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("ItserviceContractUseForSubCustomers")
                        .HasColumnName("ITServiceContractUseForSubCustomers");

                    b.Property<DateTime?>("ItserviceContractValidFrom")
                        .HasColumnName("ITServiceContractValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceContractValidTo")
                        .HasColumnName("ITServiceContractValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("ItserviceContractId");

                    b.HasIndex("ItserviceContractName", "ItserviceContractCustomerId")
                        .IsUnique()
                        .HasName("IX_ITServiceContracts");

                    b.ToTable("ITServiceContracts");
                });

            modelBuilder.Entity("LIA2Project.Models.ItserviceLevels", b =>
                {
                    b.Property<Guid>("ItserviceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITServiceLevelID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ItserviceLevelActionTime")
                        .HasColumnName("ITServiceLevelActionTime");

                    b.Property<byte?>("ItserviceLevelCaseCategory1")
                        .HasColumnName("ITServiceLevelCaseCategory1");

                    b.Property<byte?>("ItserviceLevelCaseCategory2")
                        .HasColumnName("ITServiceLevelCaseCategory2");

                    b.Property<byte?>("ItserviceLevelCaseCategory3")
                        .HasColumnName("ITServiceLevelCaseCategory3");

                    b.Property<int?>("ItserviceLevelCaseGroupId")
                        .HasColumnName("ITServiceLevelCaseGroupID");

                    b.Property<short?>("ItserviceLevelCasePriority")
                        .HasColumnName("ITServiceLevelCasePriority");

                    b.Property<byte?>("ItserviceLevelCaseType")
                        .HasColumnName("ITServiceLevelCaseType");

                    b.Property<int?>("ItserviceLevelEscalateTimeLevel2")
                        .HasColumnName("ITServiceLevelEscalateTimeLevel2");

                    b.Property<int?>("ItserviceLevelEscalateTimeLevel3")
                        .HasColumnName("ITServiceLevelEscalateTimeLevel3");

                    b.Property<int?>("ItserviceLevelNotifyHandlerTime")
                        .HasColumnName("ITServiceLevelNotifyHandlerTime");

                    b.Property<int?>("ItserviceLevelNotifyManagerTime")
                        .HasColumnName("ITServiceLevelNotifyManagerTime");

                    b.Property<Guid>("ItserviceLevelServiceContractId")
                        .HasColumnName("ITServiceLevelServiceContractID");

                    b.Property<Guid>("ItserviceLevelServiceId")
                        .HasColumnName("ITServiceLevelServiceID");

                    b.HasKey("ItserviceLevelId");

                    b.HasIndex("ItserviceLevelServiceContractId", "ItserviceLevelServiceId", "ItserviceLevelCaseType", "ItserviceLevelCaseGroupId", "ItserviceLevelCaseCategory1", "ItserviceLevelCaseCategory2", "ItserviceLevelCaseCategory3", "ItserviceLevelCasePriority")
                        .IsUnique()
                        .HasName("IX_ITServiceLevels")
                        .HasFilter("[ITServiceLevelCaseType] IS NOT NULL AND [ITServiceLevelCaseGroupID] IS NOT NULL AND [ITServiceLevelCaseCategory1] IS NOT NULL AND [ITServiceLevelCaseCategory2] IS NOT NULL AND [ITServiceLevelCaseCategory3] IS NOT NULL AND [ITServiceLevelCasePriority] IS NOT NULL");

                    b.ToTable("ITServiceLevels");
                });

            modelBuilder.Entity("LIA2Project.Models.Itservices", b =>
                {
                    b.Property<Guid>("ItserviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITServiceID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ItserviceDescription")
                        .HasColumnName("ITServiceDescription")
                        .HasColumnType("text");

                    b.Property<string>("ItserviceManager")
                        .HasColumnName("ITServiceManager")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ItserviceName")
                        .IsRequired()
                        .HasColumnName("ITServiceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("ItserviceOpenDay1")
                        .HasColumnName("ITServiceOpenDay1");

                    b.Property<bool>("ItserviceOpenDay2")
                        .HasColumnName("ITServiceOpenDay2");

                    b.Property<bool>("ItserviceOpenDay3")
                        .HasColumnName("ITServiceOpenDay3");

                    b.Property<bool>("ItserviceOpenDay4")
                        .HasColumnName("ITServiceOpenDay4");

                    b.Property<bool>("ItserviceOpenDay5")
                        .HasColumnName("ITServiceOpenDay5");

                    b.Property<bool>("ItserviceOpenDay6")
                        .HasColumnName("ITServiceOpenDay6");

                    b.Property<bool>("ItserviceOpenDay7")
                        .HasColumnName("ITServiceOpenDay7");

                    b.Property<DateTime?>("ItserviceOpenFromDay1")
                        .HasColumnName("ITServiceOpenFromDay1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay2")
                        .HasColumnName("ITServiceOpenFromDay2")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay3")
                        .HasColumnName("ITServiceOpenFromDay3")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay4")
                        .HasColumnName("ITServiceOpenFromDay4")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay5")
                        .HasColumnName("ITServiceOpenFromDay5")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay6")
                        .HasColumnName("ITServiceOpenFromDay6")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenFromDay7")
                        .HasColumnName("ITServiceOpenFromDay7")
                        .HasColumnType("datetime");

                    b.Property<int>("ItserviceOpenTimeZoneBias")
                        .HasColumnName("ITServiceOpenTimeZoneBias");

                    b.Property<string>("ItserviceOpenTimeZoneCode")
                        .HasColumnName("ITServiceOpenTimeZoneCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ItserviceOpenToDay1")
                        .HasColumnName("ITServiceOpenToDay1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay2")
                        .HasColumnName("ITServiceOpenToDay2")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay3")
                        .HasColumnName("ITServiceOpenToDay3")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay4")
                        .HasColumnName("ITServiceOpenToDay4")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay5")
                        .HasColumnName("ITServiceOpenToDay5")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay6")
                        .HasColumnName("ITServiceOpenToDay6")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ItserviceOpenToDay7")
                        .HasColumnName("ITServiceOpenToDay7")
                        .HasColumnType("datetime");

                    b.HasKey("ItserviceId");

                    b.HasIndex("ItserviceName")
                        .IsUnique()
                        .HasName("IX_ITServices");

                    b.ToTable("ITServices");
                });

            modelBuilder.Entity("LIA2Project.Models.JobMembers", b =>
                {
                    b.Property<Guid>("JobMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobMemberID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("JobMemberDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("JobMemberDomain")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("JobMemberErrorId")
                        .HasColumnName("JobMemberErrorID");

                    b.Property<Guid?>("JobMemberJobId")
                        .HasColumnName("JobMemberJobID");

                    b.Property<string>("JobMemberName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("JobMemberStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("JobMemberStatusText")
                        .HasColumnType("text");

                    b.HasKey("JobMemberId");

                    b.ToTable("JobMembers");
                });

            modelBuilder.Entity("LIA2Project.Models.Jobs", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("JobCommand")
                        .HasColumnType("text");

                    b.Property<DateTime?>("JobCreated")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JobDomain")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JobManagerDomain")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JobManagerName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JobName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JobPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("JobResult")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay1")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay2")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay3")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay4")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay5")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay6")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("JobScheduleDay7")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("JobScheduleTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("JobSettings")
                        .HasColumnType("text");

                    b.Property<DateTime?>("JobStartTime")
                        .HasColumnType("datetime");

                    b.Property<byte?>("JobStartType");

                    b.Property<byte?>("JobStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("JobType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("JobUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("LIA2Project.Models.LicenseGroups", b =>
                {
                    b.Property<int>("LicenseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LicenseGroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LicenseGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LicenseGroupNotes")
                        .HasColumnType("text");

                    b.Property<int?>("LicenseGroupParentId")
                        .HasColumnName("LicenseGroupParentID");

                    b.Property<Guid>("LicenseGroupUniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LicenseGroupUniqueID")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("LicenseGroupId");

                    b.ToTable("LicenseGroups");
                });

            modelBuilder.Entity("LIA2Project.Models.LicensePurchases", b =>
                {
                    b.Property<int>("LicensePurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LicensePurchaseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("LicensePurchaseCost");

                    b.Property<int?>("LicensePurchaseCount");

                    b.Property<Guid?>("LicensePurchaseCustomerId")
                        .HasColumnName("LicensePurchaseCustomerID");

                    b.Property<DateTime?>("LicensePurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicensePurchaseInvoiceId")
                        .HasColumnName("LicensePurchaseInvoiceID")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<Guid?>("LicensePurchaseLicenseId")
                        .HasColumnName("LicensePurchaseLicenseID");

                    b.Property<string>("LicensePurchaseNotes")
                        .HasColumnType("text");

                    b.Property<string>("LicensePurchaseSupplier")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("LicensePurchaseType");

                    b.HasKey("LicensePurchaseId");

                    b.ToTable("LicensePurchases");
                });

            modelBuilder.Entity("LIA2Project.Models.Licenses", b =>
                {
                    b.Property<Guid>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LicenseID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("LicenseComment")
                        .HasColumnType("text");

                    b.Property<int?>("LicenseGroupId")
                        .HasColumnName("LicenseGroupID");

                    b.Property<string>("LicenseName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("LicenseType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("LicenseId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("LIA2Project.Models.LicenseSupport", b =>
                {
                    b.Property<int>("LicenseSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LicenseSupportID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("LicenseSupportCost");

                    b.Property<Guid?>("LicenseSupportCustomerId")
                        .HasColumnName("LicenseSupportCustomerID");

                    b.Property<DateTime?>("LicenseSupportEndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LicenseSupportLicenseId")
                        .HasColumnName("LicenseSupportLicenseID");

                    b.Property<string>("LicenseSupportNotes")
                        .HasColumnType("text");

                    b.Property<byte?>("LicenseSupportPeriod");

                    b.Property<DateTime?>("LicenseSupportReminderSent")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LicenseSupportStartDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("LicenseSupportType");

                    b.HasKey("LicenseSupportId");

                    b.ToTable("LicenseSupport");
                });

            modelBuilder.Entity("LIA2Project.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailBody")
                        .HasColumnType("text");

                    b.Property<string>("MailBox")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MailDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("MailFormat")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("MailPlainText")
                        .HasColumnType("text");

                    b.Property<short?>("MailPrio");

                    b.Property<string>("MailSubject")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("MailThread")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("MailType")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("MailId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("LIA2Project.Models.MailAttachments", b =>
                {
                    b.Property<int>("MailAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailAttachmentFilename")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("MailAttachmentMailId");

                    b.Property<string>("MailAttachmentName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("MailAttachmentId");

                    b.ToTable("MailAttachments");
                });

            modelBuilder.Entity("LIA2Project.Models.MailRecipients", b =>
                {
                    b.Property<int>("MailRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailRecipientAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("MailRecipientMailId");

                    b.Property<string>("MailRecipientName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MailRecipientType")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("MailRecipientId");

                    b.ToTable("MailRecipients");
                });

            modelBuilder.Entity("LIA2Project.Models.MeterApps", b =>
                {
                    b.Property<Guid>("MeterAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeterAppID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("MeterAppAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MeterAppApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MeterAppClient")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MeterAppCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MeterAppDomain")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MeterAppFirstUse")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("MeterAppGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MeterAppLastUse")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("MeterAppName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MeterAppTotalUse");

                    b.Property<string>("MeterAppVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MeterAppId");

                    b.ToTable("MeterApps");
                });

            modelBuilder.Entity("LIA2Project.Models.MgmtLog", b =>
                {
                    b.Property<long>("MgmtLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MgmtLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MgmtLogCategory")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("MgmtLogEventId")
                        .HasColumnName("MgmtLogEventID");

                    b.Property<string>("MgmtLogGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("MgmtLogHost")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("MgmtLogOrigin")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("MgmtLogSeverity");

                    b.Property<string>("MgmtLogSource")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<byte?>("MgmtLogStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MgmtLogText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MgmtLogTime")
                        .HasColumnType("datetime");

                    b.Property<string>("MgmtLogUser")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("MgmtLogId");

                    b.HasIndex("MgmtLogTime");

                    b.ToTable("MgmtLog");
                });

            modelBuilder.Entity("LIA2Project.Models.ObjectLinks", b =>
                {
                    b.Property<Guid>("ObjectLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ObjectLinkID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ObjectLinkDestinationId")
                        .HasColumnName("ObjectLinkDestinationID");

                    b.Property<string>("ObjectLinkDestinationType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<short>("ObjectLinkLinkType");

                    b.Property<string>("ObjectLinkNotes")
                        .HasColumnType("text");

                    b.Property<short>("ObjectLinkPriority");

                    b.Property<Guid>("ObjectLinkSourceId")
                        .HasColumnName("ObjectLinkSourceID");

                    b.Property<string>("ObjectLinkSourceType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ObjectLinkText")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ObjectLinkId");

                    b.ToTable("ObjectLinks");
                });

            modelBuilder.Entity("LIA2Project.Models.Os", b =>
                {
                    b.Property<long>("Osid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OSID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Osbuild")
                        .HasColumnName("OSBuild")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OsinstallDate")
                        .HasColumnName("OSInstallDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OsinventoryId")
                        .HasColumnName("OSInventoryID");

                    b.Property<string>("Oslanguage")
                        .HasColumnName("OSLanguage")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Osname")
                        .HasColumnName("OSName")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("OsservicePack")
                        .HasColumnName("OSServicePack")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Ostype")
                        .HasColumnName("OSType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Osid");

                    b.ToTable("OS");
                });

            modelBuilder.Entity("LIA2Project.Models.Ratings", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RatingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RatingObjectId")
                        .IsRequired()
                        .HasColumnName("RatingObjectID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RatingObjectType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RatingUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("RatingValue");

                    b.HasKey("RatingId");

                    b.HasIndex("RatingUser", "RatingObjectType", "RatingObjectId")
                        .IsUnique()
                        .HasName("IX_Ratings");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("LIA2Project.Models.Services", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ServiceDisplayName")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<Guid>("ServiceInventoryId")
                        .HasColumnName("ServiceInventoryID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ServiceStartMode")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool?>("ServiceStarted");

                    b.Property<string>("ServiceVersion")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("LIA2Project.Models.Settings", b =>
                {
                    b.Property<string>("SettingScope")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SettingIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SettingModule")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SettingKey")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SettingName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SettingType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SettingValue")
                        .HasColumnType("text");

                    b.HasKey("SettingScope", "SettingIdentifier", "SettingModule", "SettingKey", "SettingName", "SettingType");

                    b.HasIndex("SettingScope", "SettingIdentifier", "SettingKey", "SettingModule", "SettingName")
                        .IsUnique()
                        .HasName("IX_Settings");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("LIA2Project.Models.Software", b =>
                {
                    b.Property<long>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SoftwareID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("SoftwareInstallDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SoftwareInstallType")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<Guid>("SoftwareInventoryId")
                        .HasColumnName("SoftwareInventoryID");

                    b.Property<bool?>("SoftwareIs64Bit");

                    b.Property<bool?>("SoftwareIsOfficeStandalone");

                    b.Property<bool?>("SoftwareIsOfficeSuite");

                    b.Property<string>("SoftwareLanguage")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("SoftwareLicenseType");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SoftwareUninstall")
                        .HasColumnType("text");

                    b.Property<string>("SoftwareVersion")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("SoftwareId");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("LIA2Project.Models.SysInfo", b =>
                {
                    b.Property<long>("SysInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SysInfoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SysInfoCategory")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SysInfoGroup")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid>("SysInfoInventoryId")
                        .HasColumnName("SysInfoInventoryID");

                    b.Property<string>("SysInfoItem")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SysInfoProperty")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SysInfoValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("SysInfoId");

                    b.ToTable("SysInfo");
                });

            modelBuilder.Entity("LIA2Project.Models.System", b =>
                {
                    b.Property<string>("LicenseKey")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseIdprefix")
                        .HasColumnName("CaseIDPrefix")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DatabaseVersion")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastReport")
                        .HasColumnType("datetime");

                    b.Property<string>("LicensePin")
                        .HasColumnName("LicensePIN")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LicenseKey");

                    b.ToTable("System");
                });

            modelBuilder.Entity("LIA2Project.Models.Updates", b =>
                {
                    b.Property<long>("UpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("UpdateInstallDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UpdateInventoryId")
                        .HasColumnName("UpdateInventoryID");

                    b.Property<string>("UpdateLanguage")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("UpdateName")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("UpdateUninstall")
                        .HasColumnType("text");

                    b.Property<string>("UpdateVersion")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("UpdateId");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("LIA2Project.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Id");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<bool?>("UserAccountEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("UserAdministrator");

                    b.Property<string>("UserAuthPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserAuthType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserCompany")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UserCustomerId")
                        .HasColumnName("UserCustomerID");

                    b.Property<string>("UserDebitAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UserDebitActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserDebitActivity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDebitDepartment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UserDebitExist")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("UserDebitId")
                        .HasColumnName("UserDebitID");

                    b.Property<string>("UserDebitObject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDebitOwner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDebitProject")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDebitReceiver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UserDecisionmaker");

                    b.Property<string>("UserDepartment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserDescription")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("UserDistinguishedName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("UserExportMdm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserExportMDM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserFullName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UserHandler");

                    b.Property<DateTime?>("UserLastLogon")
                        .HasColumnType("datetime");

                    b.Property<string>("UserLoginName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserMail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserMobile")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("UserName");

                    b.Property<string>("UserPersonalId")
                        .HasColumnName("UserPersonalID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserPosition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UserSyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserSyncId")
                        .HasColumnName("UserSyncID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("UserSyncSource")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UserSynchronized")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserTelephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("UserLoginName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LIA2Project.Models.VmGuestAdapters", b =>
                {
                    b.Property<Guid>("VmGuestAdapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VmGuestAdapterID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("VmGuestAdapterGuestId")
                        .HasColumnName("VmGuestAdapterGuestID");

                    b.Property<string>("VmGuestAdapterMacaddress")
                        .HasColumnName("VmGuestAdapterMACAddress")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.HasKey("VmGuestAdapterId");

                    b.ToTable("VmGuestAdapters");
                });

            modelBuilder.Entity("LIA2Project.Models.VmGuests", b =>
                {
                    b.Property<Guid>("VmGuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VmGuestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("VmGuestHostId")
                        .HasColumnName("VmGuestHostID");

                    b.Property<string>("VmGuestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("VmGuestPowerState");

                    b.Property<string>("VmGuestUuid")
                        .HasColumnName("VmGuestUUID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VmGuestId");

                    b.ToTable("VmGuests");
                });
#pragma warning restore 612, 618
        }
    }
}
